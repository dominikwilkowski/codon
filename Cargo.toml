[package]
name = "codon"
version = "1.0.0"
edition = "2021"
authors = [
	"Dominik Wilkowski <Hi@Dominik-Wilkowski.com>",
	"Joshua Padman <joshua@padman.id.au>",
]
license = "GPL-3.0-or-later"
description = "A vault GUI for your offline passwords"
homepage = "https://github.com/dominikwilkowski/codon"
repository = "https://github.com/dominikwilkowski/codon"
keywords = [
	"biotech",
	"agriculture",
	"aquaculture",
	"chemicals",
	"nano bio polymers",
	"leptos",
	"ssr",
]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
axum = { version = "0.7", features = ["macros"], optional = true }
console_error_panic_hook = "0.1"
futures = "0.3"
leptos = { version = "0.6", features = ["nightly"] }
leptos_axum = { version = "0.6", optional = true }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_router = { version = "0.6", features = ["nightly"] }
tokio = { version = "1", features = ["rt-multi-thread", "fs"], optional = true }
tower = { version = "0.4", optional = true }
tower-http = { version = "0.5", features = ["fs"], optional = true }
wasm-bindgen = "=0.2.93"
thiserror = "1"
tracing = { version = "0.1", optional = true }
http = "1"
serde = { version = "1.0", features = ["derive"] }
sqlx = { version = "0.8", features = [
	"runtime-tokio-rustls",
	"postgres",
	"chrono",
	"macros",
], optional = true }
stylance = { version = "0.5", features = ["nightly"] }
dotenvy = "0.15"
web-sys = { version = "0.3", features = ["HtmlVideoElement"] }
server_fn = { version = "0.6", features = ["serde-lite", "rkyv", "multipart"] }
js-sys = "0.3"
wasm-bindgen-futures = "0.4"
leptos-qr-scanner = "0.2"
chrono = { version = "0.4", features = ["serde"] }
thaw = { version = "0.3" }
qrcodegen = "1.8"
convert_case = "0.6"
uuid = { version = "1.10", features = ["serde", "v4", "js"] }
anyhow = "1.0"
async-trait = { version = "0.1", optional = true }
rand = { version = "0.8", features = ["min_const_gen"], optional = true }
axum_session_auth = { version = "0.14", optional = true }
axum_session_sqlx = { version = "0.3", features = [ "postgres", "tls-rustls"], optional = true }
axum_session = { version = "0.14", optional = true }
argon2 = { version = "0.5", features = ["std"], optional = true }

[features]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate", "thaw/hydrate"]
ssr = [
	"dep:axum",
	"dep:tokio",
	"dep:axum_session",
	"dep:axum_session_auth",
	"dep:axum_session_sqlx",
	"dep:argon2",
	"dep:rand",
	"dep:tower",
	"dep:tower-http",
	"dep:leptos_axum",
	"dep:async-trait",
	"dep:sqlx",
	"leptos/ssr",
	"leptos_meta/ssr",
	"leptos_router/ssr",
	"dep:tracing",
	"thaw/ssr",
]

# [package.metadata.cargo-all-features]
# denylist = ["axum", "tower", "tower-http", "tokio", "sqlx", "leptos_axum"]
# skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"]]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "codon"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/bundle.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
# site-addr = "10.0.0.5:3000"
site-addr = "127.0.0.1:3000"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

[package.metadata.stylance]

# output_file
# When set, stylance-cli will bundle all css module files
# into by concatenating them and put the result in this file.
output_file = "./style/bundle.scss"

# output_dir
# When set, stylance-cli will create a folder named "stylance" inside
# the output_dir directory.
# The stylance folder will be populated with one file per detected css module
# and one _all.scss file that contains one `@use "file.module-hash.scss";` statement
# per module file.
# You can use that file to import all your modules into your main scss project.
output_dir = "./style/"

# folders
# folders in which stylance cli will look for css module files.
# defaults to ["./src/"]
folders = ["./src/", "./style/"]

# extensions
# files ending with these extensions will be considered to be
# css modules by stylance cli and will be included in the output
# bundle
# defaults to [".module.scss", ".module.css"]
extensions = [".module.scss", ".module.css"]

# scss_prelude
# When generating an scss file stylance-cli will prepend this string
# Useful to include a @use statement to all scss modules.
scss_prelude = '@use "../path/to/prelude" as *;'

# hash_len
# Controls how long the hash name used in scoped classes should be.
# It is safe to lower this as much as you want, stylance cli will produce an
# error if two files end up with colliding hashes.
# defaults to 7
hash_len = 7

# class_name_pattern
# Controls the shape of the transformed scoped class names.
# [name] will be replaced with the original class name
# [hash] will be replaced with the hash of css module file path.
# defaults to "[name]-[hash]"
class_name_pattern = "codon-[name]-[hash]"
